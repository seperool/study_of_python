---
title: "Básico de Python"
author: "Sergio Pedro Rodrigues Oliveira"
format:
    html:
        code-fold: true
        number-sections: true
    pdf:
      toc: false
      lof: false
      lot: false
      toc-depth: 5
      number-sections: true
      number-depth: 5
      colorlinks: true
      cite-method: biblatex
    docx:
      toc: true
      number-sections: true
      highlight-style: github
jupyter: python3
bibliography: Quarto/pythonbibliografia.bib
csl: Quarto/abnt.csl
---

\thispagestyle{empty}

\newpage
\pagenumbering{roman}

```{=latex}
\setcounter{tocdepth}{4}
\renewcommand{\contentsname}{SUMÁRIO}
\tableofcontents
```

\newpage

```{=latex}
\setcounter{tocdepth}{4}
\renewcommand{\listfigurename}{LISTA DE FIGURAS}
\listoffigures
```
\newpage

```{=latex}
\setcounter{tocdepth}{4}
\renewcommand{\listtablename}{LISTA DE TABELAS}
\listoftables
```

```{python}
#| echo: false
#| error: false
#| warning: false
from IPython.display import Markdown
from tabulate import tabulate
import math
import statistics
import numpy as np
import pandas as pd
```

\newpage

# Diagrama de estudo

```{mermaid}
flowchart LR
  A[Python básico] --> B(Projeto)
  B --> C{Estatística}
  C --> E[Analise de dados]
  C --> F[Mineração de dados]
```

# Variáveis e tipos de dados simples

## `print()`
Print é uma função que exibe uma string na tela.

Exemplo: 

```{python}
print("string")
```

## `print()` com variáveis

Podemos usar a função `print()` para imprimir uma variável string.

Exemplo:

```{python}
message = "Hello world!"
print(message)
```

\pagenumbering{arabic}
\newpage

## Regras de nomes de variáveis

Regras ou diretrizes para usar variáveis em Python.

* Nomes de variáveis  deve conter apenas letras, números e underscores. Podemos começar a variável com letra ou underscore, mas nunca com um número.
* Espaços não são permitidos em nomes de variáveis, mas underscores podem ser usados para separar palavras.
* Evite usar palavras reservadas e nome de funções em Python como nome de variáveis.
* Nomes de variáveis devem ser concisos, porém descritivos.
* Tome cuidado ao usar a letra l e a letra maiuscula O, pois podem ser confundidas com os números 1 e 0.

\newpage

## Concatenando strings

Podemos usar o simbolo de (+) para combinar strings (concatenar).

Exemplo:

```{python}
first_name = "ada"
last_name = "lovelace"
full_name = first_name + " " + last_name
print("Hello, " + full_name.title() + "!")
```

Os espaços em branco entre aspas servem para criar espaços na string.

## Métodos auxiliares da função `print()`

1. `.title()`
   
  Coloca apenas as primeiras letras em maiúsculas de cada palavra e o resto em minúscula.

  Exemplo:

```{python}
full_name = "ada lovelace"
print(full_name.title())
```


2. `.upper()`

  Coloca todas as letras em maiúsculas.

  Exemplo:

```{python}
full_name = "ada lovelace"
print(full_name.upper())
```

3. `.lower()`

  Coloca todas as letras em minusculas.
  O método `.lower()` é particularmente útil para armazenar dados. Converter os dados em minúscula antes de armazenar.

  Exemplo:

```{python}
full_name = "ada lovelace"
print(full_name.lower())
```

\newpage

## Caracteres de escape

Podemos inserir alguns caracteres de escape no texto para executar alguma ação, como pular linha, gerar tabulação e etc. Alguns caracteres podem ser vistos na @tbl-caresc.

Todos os caracteres de escape começam com barra(`\`) + complemento.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-caresc
#| tbl-cap: Caracteres de escape

from IPython.display import Markdown
from tabulate import tabulate
table = [["`\\`t","Gera tabulação (tab)."],
         ["`\\`n","Gera quebra de linha."]]
Markdown(tabulate(
  table, 
  headers=["Caracteres de escape","Descrição"]
))
```

Exemplo:
```{python}
print("Language:\nPython\nJava\nC\nJavaScript")
```

\newpage

## Removendo espaços em branco `print()`

1. `.rstrip()`

  Remove espaço em branco do lado direito.

  Exemplo:
```{python}
favorite_linguage = 'python '
favorite_linguage.rstrip()
```

2. `.lstrip()`

  Remove espaço em branco do lado esquerdo.

  Exemplo:
```{python}
favorite_linguage = ' python'
favorite_linguage.lstrip()
```

3. `.strip()`

  Remove os espaços em branco dos dois lados ao mesmo tempo.

  Exemplo:
```{python}
favorite_linguage = ' python '
favorite_linguage.strip()
```

   * Os metodos usados não removem os espaços em branco em definitivo, para remover em definitivo é necessario armazenar o valor novo na variável.

```{python}
favorite_linguage = ' python '
favorite_linguage = favorite_linguage.strip()
favorite_linguage
```

\newpage

## Números

A linguagem Python faz tipagem automática (dinâmica), tipa a variável de acordo com o uso. E o Python contém uma tipagem forte, não faz converção automática do tipo de uma variável para executar uma ação (operação).

Em resumo, python tem é uma linguagem de tipagem dinâmica e forte.

Os principais tipos de dados no Python são estão presentes na @tbl-tiposdados.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-tiposdados
#| tbl-cap: Principais tipos de dados

from IPython.display import Markdown
from tabulate import tabulate
table = [["Inteiro","int","Números inteiros"],
         ["Ponto flutuante","float","Números com ponto decimal"]]
Markdown(tabulate(
  table, 
  headers=["Nome","Abreviação","Descrição"]
))
```

## Funções de conversão de tipo

Podemos converte variáveis para determinado tipo especificado usando funções de conversão de tipo, como pode ser obeservado na @tbl-functipo.

Converter uma variável não é permanente, a não ser que a ação seja armazenada na variável explicitamente.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-functipo
#| tbl-cap: Funções de conversão de tipo

from IPython.display import Markdown
from tabulate import tabulate
table = [["int","`int()`","Converte variável para o tipo inteiro(int)"],
         ["float","`float()`","Converte variável para o tipo float"],
         ["string","`str()`","Converte variável para o tipo string"]]
Markdown(tabulate(
  table, 
  headers=["Tipo para converter","Função","Descrição"]
))
```

A função `str()` é deveras importante, pois pode auxiliar na função `print()`. A função `print()` só imprime na tela veriáveis string, sendo assim, precisamos converter as variáveis de outros tipos para string (pelo menos, momentaneamente), para comprir essa condição.

Exemplo:

```{python}
age = 23
print("Happy " + str(age) + "rd Birthday!")
```

\newpage

## Descobrindo o tipo da variável usando a função `type()`

Podemos usar a função `type()` para descobrir o tipo de determinada variável.

```{python}
age = 23
print (type(age))
```

É uma **boa pratica** usar a função `type()`, para conferir o tipo da variável, antes de manipular alguma variável. Assim o programador terá o controle sobre as variáveis que esta trabalhando. Essa boa prática evita erros.

Também é uma **boa prática**, ao identificar/observar um erro, conferir os tipos das variáveis envolvidas. É um dos erros mais comuns: erro de tipagem.

\newpage

## Operações básicas

A @tbl-opbasicpy apresenta as principais operações básicas do python.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opbasicpy
#| tbl-cap: Operações básicas

from IPython.display import Markdown
from tabulate import tabulate
table = [["Soma","+","2+2=4"],
         ["Subtração","-","3-2=1"],
         ["Multiplicação","*","2*3=6"],
         ["Divisão","/","5/4=1.25"],
         ["Divisão inteira","//","5//4=1"],
         ["Resto da divisão (módulo)","%","10%8=2"],
         ["Potência","**","3**2=9"],
         ["Raiz","**","4**0.5=2"]]
Markdown(tabulate(
  table, 
  headers=["Operação","Símbolo","Exemplo"]
))
```

\newpage

## Biblioteca `math` para ampliar operações matematicas

Podemos usar o pacote `math` para ampliar as funções matemáticas do Python (básicas, trigonométricas e estatísticas). A @tbl-opmathpy apresenta as principais funções básicas da biblioteca `math`.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opmathpy
#| tbl-cap: Algumas operações da biblioteca `math`

from IPython.display import Markdown
from tabulate import tabulate
table = [["Soma","`math.add(x,y)`","`math.add(2,2) = (2+2)=4`"],
        ["Subtração","`math.subtract(x,y)`","`math.subtract(2,2) = (2-2)=0`"],
        ["Raiz quadrada","`math.sqrt()`","`math.sqrt(4)=2`"],
        ["Potência","`math.pow(x,y)`","`math.pow(2,3) = (2**3)=8`"],
        ["Seno","`math.sin()`","`math.sin()`, retorna um ângulo em radianos."],
        ["Cosseno","`math.cos()`","`math.cos()`, retorna um ângulo em radianos."],
        ["Tangente","`math.tan()`","`math.tan()`, retorna um ângulo em radianos."],
        ["potencia de Euler","`math.exp(x)`","`math.exp(x) = math.pow(math.e**x)`"],
        ["Logaritmo natural, ou log neperiano","`math.log(x)`","`math.log(2)=0.69`"],
        ["Logaritmo","`math.log(x[,base])`","`math.log(2,10)=0.3`"]]
Markdown(tabulate(
  table, 
  headers=["Operação","Símbolo","Exemplo"]
))
```

Para converter o ângulo para radianos podemos usar a função `math.radians()`.

```{python}
import math
#Seno do ângulo de 45°
#Resultado em Radianos
print(str(math.sin(math.radians(45))))
```

Para converter de radiano para grau podemos usar a função `math.degrees()`.

```{python}
import math
#Seno do ângulo de 45°
#Resultado em ângulo
print(str(math.degrees(math.sin(math.radians(45)))))
```

\newpage

## Operações lógicas básicas

A @tbl-opbasiclogpy apresenta as principais operações lógica básica do python. As operações lógicas retornam `True` ou `False`.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opbasiclogpy
#| tbl-cap: Operações Lógicas

from IPython.display import Markdown
from tabulate import tabulate
table = [["==","Igual a","Varifica se um valor é igual ao outro.","1==1 = True"],
["!=","Diferente de","Varifica se um valor é diferente ao outro.","1!=2 = True"],
[">","Maior que","Varifica se um valor é maior que outro.","5>1 = True"],
[">=","Maior ou igual","Varifica se um valor é maior ou igual a outro.","5>=5 = True"],
["<","Menor que","Varifica se um valor é menor que outro.","1<5 = True"],
["<=","Menor ou igual","Varifica se um valor é menor ou igual a outro.","1<=4 = True"],
["and","E","Retorna True se ambas as afirmações forem verdadeiras.","(1==1) and (4<5) = True"],
["or","Ou","Retorna True se uma das afirmações for verdadeiras.","(1==1) or (2<1) = True"],
["not","Negação","Retorna Falso se o resultado for verdadeiro, ou o contrario.","not (1==1) = False"]]
Markdown(tabulate(
  table, 
  headers=["Operação","Nome","Função","Exemplo"]
))
```

\newpage

## Operadores de identidade

Os operadores de identidade, @tbl-opid, são utilizados para comparar objetos, se os objetos testados referenciam o mesmo objeto.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opid
#| tbl-cap: Operadores identidade

from IPython.display import Markdown
from tabulate import tabulate
table = [["is","Retorna `True` se ambas as variáveis são o mesmo objeto."],
         ["is not","Retorna `True` se ambas as variáveis não são o mesmo objeto."]]
Markdown(tabulate(
  table, 
  headers=["Operador","Definição"]
))
```

Exemplo de operações de identidade:

```{python}
lista = [1,2,3]
outra_lista = [1,2,3]
recebe_lista = lista

print(f"São o mesmo objeto: {lista is outra_lista}")
```

```{python}
lista = [1,2,3]
outra_lista = [1,2,3]
recebe_lista = lista

print(f"São o mesmo objeto: {lista is recebe_lista}")
```

\newpage

## Operações de associação

Os operadores de associação, @tbl-opassoc, servem para verificar se determinado objeto esta **associado** ou **pertence** a determinada estrutura de dados.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opassoc
#| tbl-cap: Operadores de associação

from IPython.display import Markdown
from tabulate import tabulate
table = [["in","Retorna `True` caso valor seja encontrado na sequência."],
         ["not in","Retorna `True` caso valor não seja encontrado na sequência."]]
Markdown(tabulate(
  table, 
  headers=["Operação","Função"]
))
```

Exemplos de operações de associação:

```{python}
lista = ["Python", 'Academy', "Operadores", 'Condições']
print('Python' in lista)
```

```{python}
lista = ["Python", 'Academy', "Operadores", 'Condições']
print('SQL' not in lista)
```

\newpage

## Comentários

Um comentário permite escrever notas em seus programas em liguagem natural. Em Python, o caractere sustenido (#) indica um comentário. Tudo que vier depois de um caractere sustenido en seu código será ignorado pelo interpretador Python.

**Boas práticas** em comentários:

1. Explicar o que o código deve fazer.

2. Como faz para funcionar.

\newpage

## Zen Python

É um guia de **boas práticas**.

```{python}
import this
```

Principais pontos:

1. Bonito é melhor do que feio.
   
2. Simples é melhor que complexo.

3. Complexo é melhor que complicado.

4. Legibilidade conta.

5. Deve haver uma - e, de preferência, 
apenas uma - maneira óbvia de fazer algo.

6. Agora é melhor que nunca.

\newpage

# Listas

## Lista

Uma lista é uma coleção de itens em uma ordem em particular. Os colchetes([]) indicam uma lista e os elementos individuais de uma lista são separados por vírgula. [ver @2023curso, pp. 71]

Exemplo:

```{python}
bicycles = ['trek','cannondale','redline','specialized']
print(bicycles)
```

## Acessando elementos de uma lista

Podemos acessar a qualquer item de uma lista informando a posição, ou índice. As posições de uma lista começam no 0, e não no 1.

Para acessar um elemento de uma lista, informamos o nome nome da lista seguido do índice do item entre colchetes.

Exemplo:

```{python}
#Acessando o primeiro item da lista
bicycles = ['trek','cannondale','redline','specialized']
print(bicycles[0].title())
```

Para acessar a lista de trás pra frente podemos usar a posição invertida seguida do símbolo de menos na frente. Sendo assim, a posição do último item é -1, do penúltimo -2 e assim sucessivamente.

Exemplo:

```{python}
#Acessando o último item da lista
bicycles = ['trek','cannondale','redline','specialized']
print(bicycles[-1].title())
```

\newpage

## Alterando, acrescentando e removendo elementos

Dado que a lista é um elemento dinâmico (pode, e provavelmente ocorrerá, de sofrer modificações com o uso), este tópico comentará os principais formas de modificação de listas.

### Modificando elementos de uma lista

Para alterar um elemento que você quer modificar, use o nome da lista seguido do índice do elemento que quer modificar, e então forneça um novo valor.

```{python}
#Alterando o item 1 da lista (índice 0)
motorcycles = ['honda','yamaha','suzuki']
motorcycles[0] = 'ducati'
print(motorcycles)
```

\newpage

### Acrescentando elementos em uma lista

Existem diversas formas de adicionar elementos a uma lista:

#### Concatenando elementos no final de uma lista, método `.append()`

Adiciona um novo elemento no final da lista usando o método `.append()`.

Exemplo:

```{python}
#Adicionando elemento ao final da lista
motorcycles = ['honda','yamaha','suzuki']
motorcycles.append('ducati')
print(motorcycles)
```

#### Inserindo elementos em uma lista, método `.insert()`

Este método insere um elemento em determinada posição da lista, usando o método `.insert(índice,elemento)`.

Exemplo:

```{python}
#Adicionando um item na segunda posição da lista (índice 1)
motorcycles = ['honda','yamaha','suzuki']
motorcycles.insert(1,'ducati')
print(motorcycles)
```

\newpage

### Removendo elementos de uma lista

Os métodos para remover um item, ou um conjunto de itens, de uma lista.

#### Instrução `del`

Se a posição do item que você quer remover de uma lista for conhecida, a instrução `del` remove (deleta) um item em qualquer determinada posição. Depois de removido (deletado) não podemos mais acessar o valor, quando usado a instrução `del`.

```{python}
# Remover (deletar) primeiro item da lista, indíce 0
motorcycles = ['honda','yamaha','suzuki']
print(motorcycles)

del motorcycles[0]
print(motorcycles)
```

#### Método `.pop()`

Existem duas formas de usar o método `.pop()`:

1. `.pop()`

As vezes há necessidade de usar o valor de um item depois de removê-lo de uma lista. O método `.pop()` remove o **último** item de uma lista, mas permite que você trabalhe com esse item depois da remoção.

Remove o primeiro item de uma pilha, ou seja, o último item de uma lista.

Para usarmos o item removido é necessário, salva-lo numa variável.

Exemplo:
```{python}
# Uso do método .pop()
# Removendo último item da lista e
# Trabalhando com o item removido.
motorcycles = ['honda','yamaha','suzuki']
print(motorcycles)

pop_motorcycle = motorcycles.pop()
print(motorcycles)
print(pop_motorcycle)
```

2. `.pop(índice)`

Podemos usar o `.pop()` para remover um item em qualquer posição em uma lista, se incluirmos o índice do item que você deseja remove entre parênteses.

Exemplo:
```{python}
# Uso do método .pop()
# Removendo o segundo item da lista e
# Trabalhando com o item removido.
motorcycles = ['honda','yamaha','suzuki']
print(motorcycles)

pop_motorcycle = motorcycles.pop(1)
print(motorcycles)
print(pop_motorcycle)
```

#### Método `.remove()`

Remove um item de acordo com o valor. É usado quando sabemos o valor do item, mas não a posição.

O método `.remove()` apaga apenas a primeira ocorrência do valor especificado. Para apagar mais de uma ocorrência será necessario o uso de um laço, para cada ocorrência.

Exemplo:

```{python}
# Uso do método .remove()
# Removendo um item da lista pelo valor
motorcycles = ['honda','yamaha','ducati']
print(motorcycles)

too_expensive = 'ducati'
motorcycles.remove(too_expensive)
print(motorcycles)
```

\newpage

## Organizando uma lista

Dado que com frequência, as listas são organizadas numa ordem imprevisível, se torna necessario organizar as informações em uma ordem particular. O Python tem mecanismos para organizar listas. São eles:

### Método `.sort()`

Ordena uma lista em ordem alfabética, ou alfabetica inversa.

Para ordenar uma lista em ordem alfabética inversa, basta passar o argumento `reverse = True` para o método `.sort()`.

Uma vez ordenada pelo método `.sort()` a lista não retorna a ordem original (ordenação permanente).

Exemplo:

```{python}
# Ordenando a lista cars usando o método .sort()
cars = ['bmw','audi','toyota','subaru']
print(cars)
cars.sort()
print(cars)
cars.sort(reverse=True)
print(cars)
```

\newpage

### A função `sorted()`

A função `sorted()` ordena uma lista de forma temporaria, não altera a lista original, em ordem alfabetica. Ou seja, a lista volta a forma orginal ao final do uso da função.

Assim como no médodo `.sort()`, podemos ordenar a lista em ordem alfabética inversa adicionando o argumento `reverse=True`.

Exemplo:

```{python}
# Ordenando temporariamente a lista cars usando a função sorted()
cars = ['bmw','audi','toyota','subaru']
print(cars)
print(sorted(cars))
print(sorted(cars,reverse=True))
print(cars)
```

\newpage

### Método `.reverse()` 

Para inverter a ordem original de uma lista, podemos usar o método `.reverse()`.

O método `.reverse()` não organiza a lista em ordem alfabética inversa, o método inverte a lista original.

O método `.reverse()` ordena de forma permanente a lista, porém se usarmos o método novamente, teremos a lista original. Logo, é fácil reverter o uso do método `.reverse()`.

Exemplo:

```{python}
# Método .reverse() para inverte, de modo permanete, a ordem da lista.
cars = ['bmw','audi','toyota','subaru']
print(cars)
cars.reverse()
print(cars)
cars.reverse()
print(cars)
```

\newpage

## Descobrindo o tamanho de uma lista - `len()`

Podemos descobrir o tamanho de uma lista usando a função `len()`.

Exemplo:

```{python}
cars = ['bmw','audi','toyota','subaru']
len(cars)
```

\newpage

# Trabalhando com listas

## Percorrendo uma lista inteira com um laço

Podemos usar um laço `for` para percorrer toda uma lista, podendo assim entre outras coisas, efetuar tarefas em cada item da lista.

A estutura básica do `for` é:

```
for variável_nova in lista :
  tarefas
```

O laço diz para a cada iteração pegar um elemento da lista e armazenar na nova variável, e executar uma tarefa a cada iteração. Toda tarefa indentada depois dos dois pontos é considerada dentro do laço.

No Python o `for`, usa indentação para determinar o que esta dentro do laço.

Qual quer linha após o laço que não for indentada é considerada fora do laço.

Exemplo:

```{python}
#Executando um laço com base numa lista
magicians = ['alice', 'david', 'carolina']
for magician in magicians:
  print(magician)
```

## Erros comuns de indentação

- Esquecer de indentar.
- Esquecer de indentar linhas adicionais do laço.
- Indentação desnecessaria.
- Indentando desnecessariamente após o laço.
- Esquecer os dois-pontos do laço `for`.

\newpage

## Listas numéricas

### Gerando série de números com a função `range()`

A função `range()` é usada para gerar uma série de números, de uma determinada sequência numérica.

A função `range()` faz o Python começar a contar no primeiro valor definido (limite inferior) e parar quando atingir o segundo valor definido (limite superior). Como o for para no segundo valor, a saída não conterá o valor final. Também podemos definir um intervalo, pulando alguns valores.

Estrutura da função `range()`:

`range(limite_inferior, limite_superior, intervalo)`

Exemplo:

```{python}
for value in range(1,5):
  print(value)
```

### Usando `range()` para gerar uma lista - `list()`

Podemos usar para criar uma lista de números, combinando a função `range()`, que gera uma série númerica, com a função `list()`, que cria um lista.

Exemplo:

```{python}
numbers = list(range(1,6))
print(numbers)
```

Exemplo 2:

```{python}
numbers = list(range(2,11,2))
print(numbers)
```

\newpage

### Estatística simples com lista de números

As principais funções estatísticas estão contidas na @tbl-estsimp.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-estsimp
#| tbl-cap: Estatística simples

from IPython.display import Markdown
from tabulate import tabulate
table = [["`min()`","Retorna o valor mínimo."],
         ["`max()`","Retorna o valor máximo."],
         ["`sum()`","Somatório."]]
Markdown(tabulate(
  table, 
  headers=["Funções","Descrição"]
))
```

As principais bibliotecas auxiliares de funções estatísticas são:

1. `math`
   
2. `numpy` as np

3. `statistics`

4. `Pandas` as pd

Medidas de posição utilizando bibliotecas python, @tbl-pacstatismedposition.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-pacstatismedposition
#| tbl-cap: Medidas de posição, bibliotecas python

from IPython.display import Markdown
from tabulate import tabulate
table = [["`np.mean()`","Média aritmética"],
         ["`statistics.median()`","Mediana"],
         ["`statistics.mode()`","Moda"],
         ["`np.quantiles(array, 0.5)`","Quartil"],
         ["`np.percentile(array, 50)`","Percentil"]]
Markdown(tabulate(
  table, 
  headers=["Funções","Descrição"]
))
```

Medidas de dispersão utilizando bibliotecas python, @tbl-pacstatismeddisp.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-pacstatismeddisp
#| tbl-cap: Medidas de dispersão, bibliotecas python

from IPython.display import Markdown
from tabulate import tabulate
table = [["`pd.var()`","Variância"],
         ["`pd.std()`","Desvio-padrão"],
         ["`pd.mad()`","Desvio absoluto"],
         ["`pd.cov()`","Covariância"],
         ["`pd.corr()`","Correlação"]]
Markdown(tabulate(
  table, 
  headers=["Funções","Descrição"]
))
```

\newpage

## list comprehensions

List comprehensions é uma forma de criar listas já acoplando o laço for nelas, deixando o código mais enxuto.

Sintaxe:

`nome_lista = [expressão_calculada_do_for for variável in range()]`

Exemplo:

```{python}
squares = [value ** 2 for value in range(1,11)]
print(squares)
```

\newpage

## Trabalhando com parte de uma lista

Neste tópico vamos trabalhar com um grupo de itens de uma lista, no Python é chamado de *fatia* (de uma lista).

### Fatiando uma lista

1. Fatia simples

  Para criar uma fatia, especifique o índice do primeiro e o último elemento com os quais você deseja trabalhar.

  O Python para em um item antes do segundo índice (índice final) especificado.

  Exemplo:

```{python}
#Exibindo os 3 primeiros elementos de uma lista.
players = ["charles","martina","michael","florence","eli"]
print(players[0:3])
#Serão exibidos os itens na posição 0, 1 e 2.
```

2. Delimitando ínicio e fim da fatia.

  Podemos começar de qualquer índice.

  Exemplo:

```{python}
#Exibindo do segundo ao quarto item.
players = ["charles","martina","michael","florence","eli"]
print(players[1:4])
```

\newpage

3. Omitindo índices

  Se omitirmos o primeiro índice, o Python começará do índice 0 (ínicio). De maneira analóga, se omitirmos o segundo índice (índice final), o Python terminará no último item.

  Exemplo:

```{python}
#Exibindo os 2 primeiros elementos de uma lista.
players = ["charles","martina","michael","florence","eli"]
print(players[:2])
```

4. índice negativo

  O índice negativo devolve um elemento a determina distância do final da lista. Assim podemos exibir qualquer fatia a partir do final da lista.

  Exemplo:

```{python}
#Exibindo os 3 últimos elementos de uma lista.
players = ["charles","martina","michael","florence","eli"]
print(players[-3:])
```


\newpage

### Percorrendo uma fatia com um laço - `for`

Podemos usar uma fatia em um laço `for` se quisermos percorrer um subconjunto de elementos de uma lista.

Exemplo:

```{python}
players = ["charles","martina","michael","florence","eli"]
print("Here are the first three players on my team:")
for player in players[:3]:
  print(player.title())
```

\newpage

### Copiando uma lista

Vamos explorar o modo de copiar uma lista e analisar uma situação em que copiar uma lista é útil.

1. Copiando uma lista inteira, usando *fatia*.

  Podemos criar uma fatia que inclua a lista inteira, omitindo o primeiro e segundo índices.

  Exemplo:

```{python}
#Usamos o metódo de fatia para copiar listas.
my_foods = ["pizza","falafel","carrot cake"]
friend_foods = my_foods[:]

print("My favorite food are:")
print(my_foods)

print("\nMy friend's favorite food are:")
print(friend_foods)
```

  Ambas as listas `my_foods` e `friend_fooods`, contém os mesmos elementos, porém são listas diferentes.
  Ao modificarmos uma delas a outra não é modificada automáticamente, por serem listas diferentes.

2. Variáveis que apontam para mesma lista.

  Se ao invés de copiarmos uma fatia de uma lista para a outra, mesmo que seja a lista inteira, definirmos que uma variável é igual a outra, nesse caso criamos duas variáveis que apontam para a mesma lista. Ou seja, se modificarmos qualquer uma das listas, a outra é automaticamente modificada, pois ambas são a mesma lista.

  Exemplo:

```{python}
#Ambas variáveis apontam para a mesma lista.
my_foods = ["pizza","falafel","carrot cake"]
friend_foods = my_foods

friend_foods.append("ice cream")

print("My favorite food are:")
print(my_foods)

print("\nMy friend's favorite food are:")
print(friend_foods)
```

\newpage

## Tuplas

Tuplas são listas em que os itens não são criadas para mudar (listas imutáveis).

### Definindo uma tupla

Uma tupla se parece com uma lista, exceto por usar parênteses no lugar de colchetes.

Sintaxe:

`tuplas = (valor_1,valor_2,valor_3,...)`

Exibimos cada elemento de uma tupla com a mesma sintaxe que usamos para acessar elementos de uma lista.

Exemplo:
```{python}
dimensions = (200,50)
print(dimensions[0])
```

Se tentarmos alterar algum elemento de uma tupla, será retornado um erro de tipo.

### Percorrendo todos os valores de uma tupla com um laço

Podemos percorrer uma tupla usando um laço `for`, da mesma forma que uma lista.

Exemplo:

```{python}
dimensions = (200,50)
for dimension in dimensions:
  print(dimension)
```

\newpage

### Sobrescrevendo uma tupla

Não é possível modificar os elementos de uma tupla. Retornaria um erro de tipo.

Esse tipo de operação não funcionaria:

`tupla[0] = valor_novo`

Porém é possível subrescrever a tupla, imputando novos valores a variável.

Exemplo:

```{python}
#Sobrescrevendo uma tupla
dimensions = (200,50)
print("Original dimensions:")
for dimension in dimensions:
  print(dimension)

dimensions = (400,100)
print("\nModified dimensions:")
for dimension in dimensions:
  print(dimension)
```

\newpage

# Estatística básica

## Teoria

- Definição de Estatística:
  
  A Estatística de uma maneira geral compreende aos métodos científicos para COLETA, ORGANIZAÇÃO, RESUMO, APRESENTAÇÃO e ANÁLISE de Dados de Observação (Estudos ou Experimentos), obtidos em qualquer área de conhecimento. A finalidade é a de obter conclusões válidas para tomada de decisões.

  - Estatística Descritiva
    Parte responsável basicamente pela COLETA e SÍNTESE (Descrição) dos Dados em questão.
  
    Disponibiliza de técnicas para o alcance desses objetivos. Tais Dados podem ser provenientes de uma AMOSTRA ou POPULAÇÃO.

  - Estatística Inferencial
  
    É utilizada para tomada de decisões a respeito de uma população, em geral fazendo uso de dados de amostrais.

    Essas decisões são tomadas sob condições de INCERTEZA, por isso faz-se necessário o uso da TEORIA DA PROBABILIDADE.

- O fluxograma da estatística descritiva pode ser espresso da seguinte forma:

  ![Estatística descritiva.](Quarto/Imagens/Estatisica/fluxograma_estatistica_descritiva.png){}

- A representação tabular (Tabelas de Distribuição de Frequências) deve conter:
  - Cabeçalho
  
    Deve conter o suficiente para que as seguintes perguntas sejam respondidas "**o que?**" (Relativo ao fato), "**onde?**" (Relativo ao lugar) e "**quando?**" (Correspondente à época).

  - Corpo
  
    É o lugar da Tabela onde os dados serão registrados. Apresenta colunas e sub colunas.

  - Rodapé
  
    Local destinado à outras informações pertinentes, por exemplo a Fonte dos Dados.

- População e Amostras
  - População
  
    É o conjunto de todos os itens, objetos ou pessoas sob consideração, os quais possuem pelo menos uma característica (Variável) em comum. Os elementos pertencentes à uma População são denominados "Unidades Amostrais".

  - Amostras
  
    É qualquer subconjunto (não vazio) da População. É extraída conforme regras pré-estabelecidas, com a finalidade de obter "estimativa" de alguma característica da População.

- Tipos de variáveis
  
    ![Tipos de variáveis.](Quarto/Imagens/Estatisica/tipos_de_variaveis_estatistica.png){height=5cm}

  - *Qualitativo nominal*
  
    Não possuem uma ordem natural de ocorrência.
  
  - *Qualitativo ordinal*
  
    Possuem uma ordem natural de ocorrência.
  
  - *Quantitativo descreta*
  
    Só podem assumir valores inteiros, pertencentes a um conjunto finito ou enumerável.
  
  - *Quantitativo continua*
  
    Podem assumir qualquer valor em um determinado intervalo da reta dos números reais.

\newpage

## Preparação dos dados (sumariazar dados coletados)

- Frequência (conceito)

  É a quantidade de vezes que um valor é observado dentro de um conjunto de dado.

- Distribuição em frequências
  - A distribuição tabular é denominada: "Tabela de Distribuição de Frequências".
  - Podemos separar em 3 modelos de distribuição tabular:
    - Variável Quantitativa Discreta.
    - Variável Quantitativa Contínua.
    - Variáveis Qualitativas.

\newpage

### Variável Quantitativa Discreta

- Passos da preparação dos dados:
  - 1º Passo - **DADOS BRUTOS**:   
    Obter os dados da maneira que foram coletados.
  
  - 2º Passo - **ROL**:   
    Organizar os DADOS BRUTOS em uma determinada ordem (crescente ou decrescente).
  
  - 3º Passo - **CONSTRUÇÃO TABELA**:  
    Na primeira coluna são colocados os valores da variável, e nas demais as respectivas frequências.
  
  - Frequência absoluta simples.  
    Nº de vezes que cada valor da variável se repete.

- Principais campos da **distribuição tabular de variaveis quantitativas discreta**:
  - $n$ é o número total de elementos da amostra.
  - $x_{i}$ é o número de valores distintos que a variavel assume.
  - $F_{i}$ é a Frequência Absoluta Simples.
  - $f_{i}$ é a Frequência Relativa Simples.
  - $f_{i} \%$ é a Frequência Relativa Simples Percentual. $f_{i}\% = f_{i} \cdot 100\%$.
  - $F_{a}$ é a Frequência Absoluta Acumulada.

  ![Distribuição tabular quantitativa discreta.](Quarto/Imagens/Estatisica/Distribuicao_tabular_quantitativo_discreta.png){height=5cm}

  Observação:  
  As setas simbolizam ordem crescente ou decrescente.

\newpage

### Variável Quantitativa Contínua

- Teoria:
  - A construção da representação tabular é realizada de maneira análoga ao caso das variáveis discretas.  
  - As frequências são agrupadas em classes, denominadas de "Classes de Frequência".  
  - Denominada "Distribuição de Frequências em Classes" ou "Distribuição em Frequências Agrupadas".  
  
  ![Distribuição de frequências em classes.](Quarto/Imagens/Estatisica/Distr_de_freq_em_classes.png){}

\newpage

- Convencionar o tipo de intervalo para as classes de frequência:

![Intervalo de classes, distribuição de frequências quantitativa continua.](Quarto/Imagens/Estatisica/Intervalo_classes-dist_freq_quant_continua.png){height=5cm}

![Distribuição frequências quantitativa continua, premissas.](Quarto/Imagens/Estatisica/Distribuicao_freq_quant_conti-premissas.png){height=5cm}

\newpage

Passos para contruir a **Tabela Distribuição de Frequências Contínua**:

1. Como estabelecer o **número de classes** ($k$):  
  - Normalmente varia de 5 a 20 classes.  
  - Critério fórmula de Sturges:  
  $$k \cong 1 + 3,3 \cdot \log (n)$$

  - Critério da Raiz quadrada:  
  $$k \cong \sqrt{n}$$  
  Onde $n$ é o número de elementos amostrais.  

\newpage

2. Como calcular a **Amplitude Total** ($AT_{x}$):  
  - Diferença entre o maior e o menor valor observado.  
  - Intervalo de variação dos valores observados.  
  - Aproximar valor calculado para múltiplo do nº classes ($k$).  
  - Garantir inclusão dos valores mínimo e máximo.  
  
  - Cálculo:  
  
    $$AT_{x} = Máx(X_{i}) - Mín(X_{i})$$
  
    Onde,
  
    $AT_{x}$ é a Amplitude Total.
  
    $Máx(X_{i})$ é o *valor máximo das amostras*.
  
    $Min(X_{i})$ é o *valor mínimo das amostras*.

  - Exemplo:
  
    Se $k = 5$,
  
    $AT_{x} = 28$
  
    Logo, arredondando $AT_{x} = 30$, para aproximar o valor $AT_{x}$ de um múltiplo de $k$.

\newpage

3. Como cálcular a **Amplitude das classes da frequência** ($h$):
  
  - As classes terão amplitudes iguais.
  
  - Cálculo:
  
    $$ h = h_{i} = \frac{AT_{x}}{k}$$
  
    Onde, $k$ é o **número de classes** e $AT_{x}$ é a **Amplitude Total**.

4. Como determinar o ponto médio das classes, representatividade da classe ($p_{i}$):  
  $$p_{i} = \frac{(LS_{i} - LI_{i})}{2} $$
  Onde,  
  $LS_{i}$ é o limite superior da classe.  
  $LI_{i}$ é o limite inferior da classe.  

\newpage

5. Passos da preparação dos dados:
  - 1º Passo - **DADOS BRUTOS**: Obter os dados da maneira que foram coletados.
  - 2º Passo - **ROL**: Organizar os DADOS BRUTOS em uma determinada ordem (crescente ou decrescente).
  - 3º Passo - **CONSTRUÇÃO TABELA**: Na primeira coluna são colocados as classes, e nas demais as respectivas frequências.
  
  - Exemplo:
  
    ![Tabela de_distribuição de frequência quantitativa continua.](Quarto/Imagens/Estatisica/tabela_de_dist_freq_quant_conti.png){height=5cm}
  
    $X_{i}$ são as classes.  
    $F_{i}$ é a Frequência Absoluta Simples.  
    $f_{i}$ é a Frequência Relativa Simples.  
    $f_{i} \%$ é a Fequência Relativa Simples Percentual.  
    $F_{a}$ é a Frequência Absoluta Acumulada.  
    $f_{a}$ é a Fequência Absoluta Acumulada Simples.  
    $f_{a} \%$ é a Fequência Absoluta Acumulada Simples Percentual.  
    $p_{i}$ é a Representatividade da classe (ponto médio das classes).  

\newpage

### Variáveis Qualitativas

- Passos da preparação dos dados:
  - Análogo ao procedimento para dados discretos.
  - 1º Passo - **DADOS BRUTOS**: Obter os dados da maneira que foram coletados.
  - 2º Passo - **ROL**: Nesse caso é feita organização dos DADOS BRUTOS em ordem (Crescente ou Decrescente) de importância.
  - 3º Passo - **CONSTRUÇÃO TABELA** (Com duas ou mais colunas).

- Distribuição de Frequencia:
  - $x_{i}$ é o número de valores distintos que a variavel assume.
  - $F_{i}$ é a Frequência Absoluta Simples.
  - $f_{i}$ é a Frequência Relativa Simples.
  - $f_{i} \%$ é a Fequência Relativa Simples Percentual.
  - Inserir comentário sobre os dados.

\newpage

## Medidas de posição

- Localizar a *maior concentração de valores* de uma distribuição.
- *Sintetizar o comportamento* do conjunto do qual ele é originário.
- Possibitar a *comparação* entre séries de dados.
- As principais **medidas de posição** são:
  - **Média Aritmética** (Simples e Ponderada)
  - **Mediana**
  - **Moda**
  - **Separatrizes**
- Medidas de posição comparação:

![](Quarto/Imagens/Estatisica/medidas_de_posicao_comp.png){}

\newpage
  
### Média Aritmética (Simples e Ponderada)
- **Média Aritmética Simples**, dados Não-Agrupados (não tabelados):
  - **Média Aritmética** ($\overline{x}$) é o valor médio dos dados da distribuição.
  - É a soma de todos os elementos, dividido pelo número total de elementos.
  - Cálculo:
  $$\overline{x} = \frac{Soma}{n_{Total}}$$
- **Média Aritmética Ponderada**, dados Agrupados (tabelados):
  - Atribui-se um peso a cada valor da série.
  - É o *Ponto Médio das Classes* ($p_{i}$), multiplicado por suas respectivas *Frequência Absoluta Simples* ($F_{i}$), somadas. Dividido pelo *Número Total de Elementos da Amostra* ($n$).
  - Cálculo:
  $$\overline{x} = \frac{\sum_{i=1}^{n} p_{i} \cdot F_{i}}{n_{Total}}$$
  
  ou,
  
  $$\overline{x} = \frac{(p_{1} \cdot F_{1}) + (p_{2} \cdot F_{2})+(p_{3} \cdot F_{3}) + ...}{n_{Total}}$$

\newpage

### Mediana ($md(x)$)

#### Mediana Discreta
- Com dados em ROL, é o valor que divide o conjunto de dados em duas partes iguais.
- No caso de número de elementos impar, a mediana ($md(x)$) é o elemento central.
- No caso de número de elementos par, a mediana ($md(x)$) é a média aritmética simples dos valores centrais:
$$md(x) = \frac{x_{\frac{n}{2}} + x_{\frac{n+1}{2}}}{2}$$

Onde,

$x$ é a posição do elemento;

$n$ é o número total de elementos.

#### Mediana Contínua
- Mediana ($md$) em distribuição de frenquência em variável contínua (dados agrupados em classes):
  1. Fazer a coluna da **Frequência Absoluta Acumulada**, que é o somatório das frequências ao logo das classes.
  2. Definindo o **Intervalo da Mediana**.
    - Obter o número total de elementos $n$ (somatório das frenquências de classes),
    $$n = \sum f_i$$
    - Determinar a posição do elemento do meio do somatório das frequencias:
    $$x = \frac{\sum f_i}{2}$$
    - A classe que contém essa posição $x$ na **Frequência Absoluta Acumulada** é a classe do *intervalo da mediana*.
  3. Cálculo da Mediana:
  $$md = Li + (\frac{\frac{\sum fi}{2}-Fa_{anterior}}{f_{intervalo}} \cdot h)$$
  
  Onde,
  
  $Li$ é o limite inferior do *intervalo da mediana*;
  
  $\sum fi$ é o somatório das frequências (**frequência total** ($n$));
  
  $Fa_{anterior}$ é a **Frequência Absoluta Acumulada** da classe anterior (linha anterior ao *intervalo da mediana*);
  
  $f_{intervalo}$ é a **Frequência Absoluta Simples** do *intervalo da mediana*;
  
  $h$ é a Amplitudade da classe do *intervalo da mediana*.
  
  $$h = Ls - Li$$

\newpage

### Moda

- Moda ou $Mo(x)$: Valor com maior frequência de ocorrência em uma distribuição.
- Podem haver mais de um valor distinto com maior frequência, podendo assim ter mais de um valor na moda.

- Moda com frequência Continua:
  1. **Moda Bruta** ($M_{Bruta}$):
    - Achar a classe com maior frequência, esse será o *Intervalo Modal*.
    - Cálcular o *Ponto Médio* (Representatividade da classe) do *Intervalo Modal*:
    $$PM = \frac{LS + LI}{2}$$
    
    Onde,
    
    LS = Limite superior da classe;
    
    LI = Limite inferior da classe.
    
    - O *Ponto Médio* do *Intervalo Modal* será a **Moda Bruta**($M_{Bruta}$).
  
  2. **Moda King** ou **Moda do Rei** ($M_{King}$):
    - Determinar o intervalo (classe) com maior frequência, esse será o *Intervalo Modal*.
    - Cálculo da Moda de King ($M_{King}$):
    $$M_{King} = LI + (\frac{F_{post}}{F_{post}+F_{ant}} \cdot h)$$
    
    Onde,
    
    $LI$ é o limite inferior da classe do *Intervalo Modal*;
    
    $F_{post}$ é a frequência da classe posterior ao *Intervalo Modal*;
    
    $F_{ant}$ é a frequência da classe anterior ao *Intervalo Modal*;
    
    $h$ é a amplitude do intervalo da classe
    
    $$h = LS - LI$$
  
  3. **Moda de Czuber** ($M_{Czuber}$):
    - Determinar o intervalo (classe) com maior frequência, esse será o *Intervalo Modal*.
    - Cálculo da **Moda de Czuber** ($M_{Czuber}$):
    $$M_{Czuber} = LI + (\frac{\Delta_{ant}}{\Delta_{ant}+\Delta_{post}} \cdot h)$$
    
    Onde,
    
    $LI$ é o limite inferior da classe do *Intervalo Modal*;
    
    $\Delta_{ant}$ é a variação (diferença) da frequência da classe anterior (ao *Intervalo Modal*) com o *Intervalo Modal* (classe com maior frequência)
    $$\Delta_{ant} = |F_{i} - F_{i-1}|$$
    
    $\Delta_{post}$ é a variação (diferença) da frequência da classe posterior (ao *Intervalo Modal*) com o *Intervalo Modal* (classe com maior frequência)
    $$\Delta_{ant} = |F_{i} - F_{i+1}|$$
    
    $h$ é a amplitude do intervalo da classe
    
    $$h = LS - LI$$

\newpage

### Separatrizes

- **Separatrizes** são valores da distribuição que a dividem em partes quaisquer.
- A **mediana**, apesar de ser uma medida de tendência central, é também uma **separatriz** de ordem $1/2$, ou seja, divide a distribuição em duas partes iguais.
- As **separatrizes** mais comumente usadas são:
  - **Quartis**
  
  Dividem a distribuição em quatro partes iguais, de ordem $1/4$.
  
  - **Decis**
  
  Dividem a distribuição em 10 partes iguais, de ordem $1/10$.
  
  - **Centis**
  
  Dividem a distribuição em 100 partes iguais, de ordem $1/100$.

- Fórmula das Separatrizes:

1. Achar o **Intervalo da separatriz**
  - É a classe em que se encontra a separatriz procurada.
  - Fazer a coluna de **Frequencia Absoluta Acumulada** ($F_a$).
  - É o somatório das frequencias (total das frequencias), multiplicado pela fração da separatriz procurada ($k$). O resultado é a posição da frequencia na coluna **Frequencia Absoluta Acumulada** ($F_a$).
  $$P_k = k \cdot \sum f_i$$
  
  A classe na qual a posição pertence é o **Intervalo da separatriz**.

2. Cálculo da separatriz:
$$Sp = L_{i} + (\frac{k \cdot\sum f_i - Fa_{anterior}}{f_{Intervalo}} * h)$$

Onde,

$L_i$ é o limite inferior do **Intervalo da separatriz**;

$k$ é a fração (porcentagem) da separatriz procurada;

$\sum f_i$ é o somatório das frequências;

$Fa_{anterior}$ é a **Frequência Absoluta Acumulada** da classe anterior ao **intervalo da separatriz**;

$f_{Intervalo}$ é a **Frequência Absoluta Simples** do **intervalo da separatriz**;

$h$ é a **Amplitude** da classe (limite superior - limite inferior da classe).
$$h = Ls - Li$$

3. Cálculo de **Amplitude Interquartil** ($AI$):

- É a diferença entre 3º quartil e o 1º quartil.

$$AI = Q_3 - Q_1$$

- Para descobrir os valores dos Quartis ($Q_1$ e $Q_3$) basta usar o *cálculo das separatrizes*.

\newpage

## Medidas de dispersão

\newpage

# Instruções IF

\newpage

# Bibliografia