---
title: "Básico de Python"
author: "Sergio Pedro Rodrigues Oliveira"
format:
    html:
        code-fold: true
        number-sections: true
    pdf:
      toc: false
      lof: false
      lot: false
      toc-depth: 2
      number-sections: true
      number-depth: 3
      colorlinks: true
      cite-method: biblatex
    docx:
      toc: true
      number-sections: true
      highlight-style: github
jupyter: python3
---

\thispagestyle{empty}

\newpage
\pagenumbering{roman}

```{=latex}
\setcounter{tocdepth}{4}
\renewcommand{\contentsname}{SUMÁRIO}
\tableofcontents
```

\newpage

```{=latex}
\setcounter{tocdepth}{4}
\renewcommand{\listfigurename}{LISTA DE FIGURAS}
\listoffigures
```
\newpage

```{=latex}
\setcounter{tocdepth}{4}
\renewcommand{\listtablename}{LISTA DE TABELAS}
\listoftables
```

```{python}
#| echo: false
#| error: false
#| warning: false
from IPython.display import Markdown
from tabulate import tabulate
```

\newpage

# Diagrama de estudo

```{mermaid}
flowchart LR
  A[Básico] --> B(Projeto)
  B --> C{Decision}
  C --> D[Analise de dados]
  C --> E[Mineração de dados]
```

# Variáveis e tipos de dados simples

## `print()`
Print é uma função que exibe uma string na tela.

Exemplo: `print("string")`

## `print()` com variáveis

Podemos usar a função `print()` para imprimir uma variável string.

Exemplo:

```
message = "Hello world!"
print(message)
```

## Regras de nomes de variáveis

Regras ou diretrizes para usar variáveis em Python.

* Nomes de variáveis  deve conter apenas letras, números e underscores. Podemos começar a variável com letra ou underscore, mas nunca com um número.
* Espaços não são permitidos em nomes de variáveis, mas underscores podem ser usados para separar palavras.
* Evite usar palavras reservadas e nome de funções em Python como nome de variáveis.
* Nomes de variáveis devem ser concisos, porém descritivos.
* Tome cuidado ao usar a letra l e a letra maiuscula O, pois podem ser confundidas com os números 1 e 0.

\pagenumbering{arabic}
\newpage

## Concatenando strings

Podemos usar o simbolo de (+) para combinar strings (concatenar).

Exemplo:

```
>>> first_name = "ada"
>>> last_name = "lovelace"
>>> full_name = fist_name + " " + last_name
>>> print("Hello, " + full_name.title() + "!")
Hello, Ada Lovelace!
```

Os espaços em branco entre aspas servem para criar espaços na string.

## Métodos auxiliares da função `print()`

1. `.title()`
   
Coloca apenas as primeiras letras em maiúsculas de cada palavra e o resto em minúscula.

Exemplo:
```
>>> print(full_name.title())`
Ada Lovelace
```


2. `.upper()`

Coloca todas as letras em maiúsculas.

Exemplo:
```
>>> print(full_name.upper())`
ADA LOVELACE
```

3. `.lower()`

Coloca todas as letras em minusculas.
O método `.lower()` é particularmente útil para armazenar dados. Converter os dados em minúscula antes de armazenar.

Exemplo:
```
>>> print(full_name.lower())`
ada lovelace
```

\newpage

## Caracteres de escape

Podemos inserir alguns caracteres de escape no texto para executar alguma ação, como pular linha, gerar tabulação e etc. Alguns caracteres podem ser vistos na @tbl-caresc.

Todos os caracteres de escape começam com barra(`\`) + complemento.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-caresc
#| tbl-cap: Caracteres de escape

from IPython.display import Markdown
from tabulate import tabulate
table = [["`\\`t","Gera tabulação (tab)."],
         ["`\\`n","Gera quebra de linha."]]
Markdown(tabulate(
  table, 
  headers=["Caracteres de escape","Descrição"]
))
```

Exemplo:
```{python}
print("Language:\nPython\nJava\nC\nJavaScript")
```

\newpage

## Removendo espaços em branco `print()`

1. `.rstrip()`

Remove espaço em branco do lado direito.

Exemplo:
```{python}
favorite_linguage = 'python '
favorite_linguage.rstrip()
```

2. `.lstrip()`

Remove espaço em branco do lado esquerdo.

Exemplo:
```{python}
favorite_linguage = ' python'
favorite_linguage.lstrip()
```

3. `.strip()`

Remove os espaços em branco dos dois lados ao mesmo tempo.

Exemplo:
```{python}
favorite_linguage = ' python '
favorite_linguage.strip()
```

* Os metodos usados não removem os espaços em branco em definitivo, para remover em definitivo é necessario armazenar o valor novo na variável.

```{python}
favorite_linguage = ' python '
favorite_linguage = favorite_linguage.strip()
favorite_linguage
```

\newpage

## Números

A linguagem Python faz tipagem automática (dinâmica), tipa a variável de acordo com o uso. E o Python contém uma tipagem forte, não faz converção automática do tipo de uma variável para executar uma ação (operação).

Em resumo, python tem é uma linguagem de tipagem dinâmica e forte.

Os principais tipos de dados no Python são estão presentes na @tbl-tiposdados.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-tiposdados
#| tbl-cap: Principais tipos de dados

from IPython.display import Markdown
from tabulate import tabulate
table = [["Inteiro","int","Números inteiros"],
         ["Ponto flutuante","float","Números com ponto decimal"]]
Markdown(tabulate(
  table, 
  headers=["Nome","Abreviação","Descrição"]
))
```

## Funções de conversão de tipo

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-functipo
#| tbl-cap: Funções de conversão de tipo

from IPython.display import Markdown
from tabulate import tabulate
table = [["int","`int()`","Converte variável para tipo inteiro(int)"],
         ["float","`float()`","Converte variável para tipo float"]]
Markdown(tabulate(
  table, 
  headers=["Tipo para converter","Função","Descrição"]
))
```

\newpage

## Operações básicas

A @tbl-opbasicpy apresenta as principais operações básicas do python.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opbasicpy
#| tbl-cap: Operações básicas

from IPython.display import Markdown
from tabulate import tabulate
table = [["Soma","+","2+2=4"],
         ["Subtração","-","3-2=1"],
         ["Multiplicação","*","2*3=6"],
         ["Divisão","/","5/4=1.25"],
         ["Divisão inteira","//","5//4=1"],
         ["Resto da divisão (módulo)","%","10%8=2"],
         ["Potência","**","3**2=9"],
         ["Raiz","**","4**0.5=2"]]
Markdown(tabulate(
  table, 
  headers=["Operação","Símbolo","Exemplo"]
))
```

Podemos usar o pacote `math` para ampliar as funções matemáticas do Python. A @tbl-opmathpy apresenta as principais funções básicas da biblioteca `math`.

**Modificar a tabela @tbl-opmathpy.**

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opmathpy
#| tbl-cap: Algumas operações da biblioteca `math`

from IPython.display import Markdown
from tabulate import tabulate
table = [["Soma","+","2+2=4"],
         ["Subtração","-","3-2=1"],
         ["Multiplicação","*","2*3=6"],
         ["Divisão","/","3/2=1"],
         ["Resto da divisão","%","10%8=2"],
         ["Potência","**","3**2=9"],
         ["Raiz","**","4**0.5=2"]]
Markdown(tabulate(
  table, 
  headers=["Operação","Símbolo","Exemplo"]
))
```

\newpage

## Operações lógicas básicas

A @tbl-opbasiclogpy apresenta as principais operações lógica básica do python. As operações lógicas retornam `True` ou `False`.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opbasiclogpy
#| tbl-cap: Operações Lógicas

from IPython.display import Markdown
from tabulate import tabulate
table = [["==","Igual a","Varifica se um valor é igual ao outro.","1==1 = True"],
["!=","Diferente de","Varifica se um valor é diferente ao outro.","1!=2 = True"],
[">","Maior que","Varifica se um valor é maior que outro.","5>1 = True"],
[">=","Maior ou igual","Varifica se um valor é maior ou igual a outro.","5>=5 = True"],
["<","Menor que","Varifica se um valor é menor que outro.","1<5 = True"],
["<=","Menor ou igual","Varifica se um valor é menor ou igual a outro.","1<=4 = True"],
["and","E","Retorna True se ambas as afirmações forem verdadeiras.","(1==1) and (4<5) = True"],
["or","Ou","Retorna True se uma das afirmações for verdadeiras.","(1==1) or (2<1) = True"],
["not","Negação","Retorna Falso se o resultado for verdadeiro, ou o contrario.","not (1==1) = False"]]
Markdown(tabulate(
  table, 
  headers=["Operação","Nome","Função","Exemplo"]
))
```

\newpage

## Operadores de identidade

Os operadores de identidade, @tbl-opid, são utilizados para comparar objetos, se os objetos testados referenciam o mesmo objeto.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opid
#| tbl-cap: Operadores identidade

from IPython.display import Markdown
from tabulate import tabulate
table = [["is","Retorna `True` se ambas as variáveis são o mesmo objeto."],
         ["is not","Retorna `True` se ambas as variáveis não são o mesmo objeto."]]
Markdown(tabulate(
  table, 
  headers=["Operador","Definição"]
))
```

Exemplo de operações de identidade:

```{python}
lista = [1,2,3]
outra_lista = [1,2,3]
recebe_lista = lista

print(f"São o mesmo objeto: {lista is outra_lista}")
```

```{python}
lista = [1,2,3]
outra_lista = [1,2,3]
recebe_lista = lista

print(f"São o mesmo objeto: {lista is recebe_lista}")
```

\newpage

## Operações de associação

Os operadores de associação, @tbl-opassoc, servem para verificar se determinado objeto esta **associado** ou **pertence** a determinada estrutura de dados.

```{python}
#| echo: false
#| error: false
#| warning: false
#| label: tbl-opassoc
#| tbl-cap: Operadores de associação

from IPython.display import Markdown
from tabulate import tabulate
table = [["in","Retorna `True` caso valor seja encontrado na sequência."],
         ["not in","Retorna `True` caso valor não seja encontrado na sequência."]]
Markdown(tabulate(
  table, 
  headers=["Operação","Função"]
))
```

Exemplos de operações de associação:

```{python}
lista = ["Python", 'Academy', "Operadores", 'Condições']
print('Python' in lista)
```

```{python}
lista = ["Python", 'Academy', "Operadores", 'Condições']
print('SQL' not in lista)
```

\newpage

## Evitando erros de tipo com a função `str()`